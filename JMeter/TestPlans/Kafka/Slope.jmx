<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="${__machineName()}_Thread Group" enabled="true">
      <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
        <boolProp name="LoopController.continue_forever">false</boolProp>
        <intProp name="LoopController.loops">-1</intProp>
      </elementProp>
      <stringProp name="ThreadGroup.num_threads">5000</stringProp>
      <stringProp name="ThreadGroup.ramp_time">30</stringProp>
      <boolProp name="ThreadGroup.scheduler">false</boolProp>
      <stringProp name="ThreadGroup.duration">15</stringProp>
      <stringProp name="ThreadGroup.delay"></stringProp>
      <boolProp name="ThreadGroup.delayedStart">true</boolProp>
    </ThreadGroup>
    <hashTree>
      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="script">String param = &quot;${__machineIP}&quot;;
if (param == &quot;192.168.51.166&quot;) {    
	props.put(&quot;threadOffset&quot;, Integer.toString(10)); 
	log.info props.get(&quot;threadOffset&quot;);
} else {    
    props.put(&quot;threadOffset&quot;, Integer.toString(0)); 
    }</stringProp>
      </JSR223Sampler>
      <hashTree/>
      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
        <boolProp name="TransactionController.includeTimers">false</boolProp>
        <boolProp name="TransactionController.parent">false</boolProp>
      </TransactionController>
      <hashTree>
        <co.signal.loadgen.LoadGenerator guiclass="TestBeanGUI" testclass="co.signal.loadgen.LoadGenerator" testname="Load Generator Config" enabled="true">
          <stringProp name="className">SlopeGenerator</stringProp>
          <stringProp name="variableName">MESSAGE</stringProp>
          <stringProp name="variableTag">TAG</stringProp>
          <stringProp name="variableSensorId">${__groovy(&quot;${__threadNum}&quot;.toInteger() + props.get(&quot;threadOffset&quot;).toInteger())}</stringProp>
        </co.signal.loadgen.LoadGenerator>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Anfrage (Request)" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="kafka_brokers" elementType="Argument">
                <stringProp name="Argument.name">kafka_brokers</stringProp>
                <stringProp name="Argument.value">172.17.100.51:31090</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_topic" elementType="Argument">
                <stringProp name="Argument.name">kafka_topic</stringProp>
                <stringProp name="Argument.value">usecase-input</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_key" elementType="Argument">
                <stringProp name="Argument.name">kafka_key</stringProp>
                <stringProp name="Argument.value">${TAG}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_message" elementType="Argument">
                <stringProp name="Argument.name">kafka_message</stringProp>
                <stringProp name="Argument.value">${MESSAGE}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_message_serializer" elementType="Argument">
                <stringProp name="Argument.name">kafka_message_serializer</stringProp>
                <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_key_serializer" elementType="Argument">
                <stringProp name="Argument.name">kafka_key_serializer</stringProp>
                <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_ssl_keystore" elementType="Argument">
                <stringProp name="Argument.name">kafka_ssl_keystore</stringProp>
                <stringProp name="Argument.value">${PARAMETER_KAFKA_SSL_KEYSTORE}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_ssl_keystore_password" elementType="Argument">
                <stringProp name="Argument.name">kafka_ssl_keystore_password</stringProp>
                <stringProp name="Argument.value">${PARAMETER_KAFKA_SSL_KEYSTORE_PASSWORD}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_ssl_truststore" elementType="Argument">
                <stringProp name="Argument.name">kafka_ssl_truststore</stringProp>
                <stringProp name="Argument.value">${PARAMETER_KAFKA_SSL_TRUSTSTORE}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_ssl_truststore_password" elementType="Argument">
                <stringProp name="Argument.name">kafka_ssl_truststore_password</stringProp>
                <stringProp name="Argument.value">${PARAMETER_KAFKA_SSL_TRUSTSTORE_PASSWORD}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_use_ssl" elementType="Argument">
                <stringProp name="Argument.name">kafka_use_ssl</stringProp>
                <stringProp name="Argument.value">${PARAMETER_KAFKA_USE_SSL}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_compression_type" elementType="Argument">
                <stringProp name="Argument.name">kafka_compression_type</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_partition" elementType="Argument">
                <stringProp name="Argument.name">kafka_partition</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">co.signal.kafkameter.KafkaProducerSampler</stringProp>
        </JavaSampler>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">15000</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
